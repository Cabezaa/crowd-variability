// Generated by CoffeeScript 1.4.0
(function() {
  var Class, Factory, Generalization, Link, MyModel,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

    if (typeof exports !== "undefined" && exports !== null) {
    exports;

  } else {
    this;

  };

  Factory = require('./factories').Factory;

  MyModel = (function() {

    function MyModel(name) {
      this.name = name;
    }

    MyModel.prototype.get_joint = function(joint_factory) {};

    return MyModel;

  })();

  Class = (function(_super) {

    __extends(Class, _super);

    function Class(name, attrs, methods) {
      this.name = name;
      this.attrs = attrs;
      this.methods = methods;
      Class.__super__.constructor.apply(this, arguments).constructor(name);
    }

    Class.joint = null;

    return Class;

  })(MyModel);

  ({
    get_name: function() {
      return this.name;
    },
    get_attrs: function() {
      return this.attrs;
    },
    get_methods: function() {
      return this.methods;
    },
    get_joint: function(factory) {
      if (this.joint === null) {
        return this.joint = factory.create_class();
      }
    }
  });

  return this.joint;

  Link = (function(_super) {

    __extends(Link, _super);

    function Link(classes) {
      this.classes = classes;
      Link.__super__.constructor.apply(this, arguments).constructor("");
    }

    Link.prototype.get_from = function() {
      return this.classes[0];
    };

    Link.prototype.get_to = function() {
      return this.classes[1];
    };

    Link.prototype.get_classes = function() {
      return this.classes;
    };

    Link.prototype.is_two_linked = function() {
      return this.classes.length === 2;
    };

    return Link;

  })(MyModel);

  Generalization = (function(_super) {

    __extends(Generalization, _super);

    function Generalization(parent_class, classes) {
      this.parent_class = parent_class;
      this.classes = classes;
    }

    return Generalization;

  })(Link);

  exports.MyModel = MyModel;

  exports.Class = Class;

  exports.Link = Link;

  exports.Generalization = Generalization;

}).call(this);
